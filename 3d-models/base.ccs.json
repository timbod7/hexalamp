{
  "settings": {
    "hasHeaders": true,
    "constrainDragToContainer": true,
    "reorderEnabled": true,
    "selectionEnabled": false,
    "popoutWholeStack": false,
    "blockedPopoutsThrowError": true,
    "closePopoutsOnUnload": true,
    "showPopoutIcon": false,
    "showMaximiseIcon": false,
    "showCloseIcon": false,
    "responsiveMode": "onload",
    "tabOverlapAllowance": 0,
    "reorderOnTabMenuClick": true,
    "tabControlOffset": 10
  },
  "dimensions": {
    "borderWidth": 5,
    "borderGrabWidth": 15,
    "minItemHeight": 10,
    "minItemWidth": 10,
    "headerHeight": 20,
    "dragProxyWidth": 300,
    "dragProxyHeight": 200
  },
  "labels": {
    "close": "close",
    "maximise": "maximise",
    "minimise": "minimise",
    "popout": "open in new window",
    "popin": "pop in",
    "tabDropdown": "additional tabs"
  },
  "content": [
    {
      "type": "row",
      "isClosable": true,
      "reorderEnabled": true,
      "title": "",
      "content": [
        {
          "type": "stack",
          "width": 50,
          "isClosable": true,
          "reorderEnabled": true,
          "title": "",
          "activeItemIndex": 0,
          "content": [
            {
              "type": "component",
              "componentName": "codeEditor",
              "title": "base.ccs.json",
              "componentState": {
                "code": [
                  "",
                  "",
                  "function importcalcs() {",
                  "    let num_leds = 30;",
                  "    let led_spacing = 17;",
                  "    let triangle_spacing = led_spacing * Math.cos(30 * Math.PI / 180);",
                  "",
                  "    let wall_thickness = 1.5;",
                  "    let lightbox_depth = 35;",
                  "    let inner_diameter = num_leds * triangle_spacing / Math.PI;",
                  "    let outer_diameter = inner_diameter + lightbox_depth;",
                  "    let layer_height = outer_diameter * Math.PI / num_leds * Math.tan(60 * Math.PI / 180);",
                  "    let mount_bracket_length = 10;",
                  "",
                  "    let diffuser_overhang_thickness = 1.2;",
                  "    let diffuser_wall_thickness = 1.0;",
                  "    let diffuser_radius_gap = 0.1;",
                  "    let cap_vert_overhang = 5;",
                  "    let cap_horz_overhang = 3;",
                  "",
                  "    let top_cap_diam = outer_diameter + 2 * (diffuser_radius_gap + diffuser_wall_thickness + cap_horz_overhang);",
                  "",
                  "    return {",
                  "        top_cap_diam,",
                  "        inner_diameter,",
                  "        cap_horz_overhang,",
                  "        cap_vert_overhang,",
                  "        mount_bracket_length,",
                  "        wall_thickness,",
                  "    }",
                  "}",
                  "",
                  "let imports = importcalcs();",
                  "",
                  "let base_outer_radius = imports.top_cap_diam / 2;",
                  "let base_outer_height = 20;",
                  "let hole_location = imports.inner_diameter/2 - imports.mount_bracket_length - imports.wall_thickness/2;",
                  "let inset1_radius = base_outer_radius - imports.cap_horz_overhang;",
                  "let inset1_height = imports.cap_vert_overhang;",
                  "let inset2_radius = imports.inner_diameter / 2;",
                  "let inset3_radius = inset2_radius - 3;",
                  "let inset4_radius = inset3_radius - 2 * (inset3_radius-hole_location);",
                  "",
                  "// A box in cylindrical coordinates ",
                  "function ccbox(x1, x2, a1, a2, z1, z2) {",
                  "    const rect = new Sketch([x1, z1])",
                  "        .LineTo([x1, z2])",
                  "        .LineTo([x2, z2])",
                  "        .LineTo([x2, z1])",
                  "        .End(true)",
                  "        .Face();",
                  "    return Rotate([0, 0, 1], a1, Revolve(Rotate([1, 0, 0], 90, rect), a2 - a1, [0, 0, 1], false, false))",
                  "}",
                  "",
                  "function leg() {",
                  "    let height = 40;",
                  "    let hextra = 5;",
                  "    let angle = 20;",
                  "    let aextra = 20;",
                  "    let fillet1 = 10;",
                  "    let fillet2 = 3;",
                  "",
                  "    // hack around opencascade issue ",
                  "    let inset2_radiusx = inset2_radius + 0.01;",
                  "",
                  "    const box1 = ccbox(inset2_radiusx, inset1_radius, -(angle + aextra) / 2, (angle + aextra) / 2, -height, hextra)",
                  "    const box2 = FilletEdges(",
                  "        ccbox(inset2_radius, inset1_radius, -(angle + aextra) / 2, -angle / 2, -height, 0),",
                  "        fillet1, [6]",
                  "    )",
                  "    const box3 = FilletEdges(",
                  "        ccbox(inset2_radius, inset1_radius, angle / 2, (angle + aextra) / 2, -height, 0),",
                  "        fillet1, [5]",
                  "    )",
                  "",
                  "    return FilletEdges(",
                  "        Difference(box1, [box2, box3]),",
                  "        fillet2, [25, 27]",
                  "    )",
                  "}",
                  "",
                  "function rod_holes() {",
                  "   let hole_diam = 6.5;",
                  "   let hole = Cylinder(hole_diam/2, base_outer_height);",
                  "   return Union([",
                  "        Translate([hole_location,0,0], hole),",
                  "        Translate([-hole_location,0,0], hole),",
                  "   ]);",
                  "",
                  "}",
                  "",
                  "function base0() {",
                  "",
                  "    let shell = Cylinder(base_outer_radius, base_outer_height);",
                  "    let inset1 = Cylinder(inset1_radius, inset1_height);",
                  "    let inset3 = Cylinder(inset3_radius, inset1_height);",
                  "    let inset4 = Cylinder(inset4_radius, base_outer_height);",
                  "",
                  "",
                  "    return Difference(shell, [",
                  "        Translate([0, 0, base_outer_height - inset1_height], inset1),",
                  "        inset3,",
                  "        inset4,",
                  "        rod_holes()",
                  "    ])",
                  "}",
                  "",
                  "function base() {",
                  "    return Union([",
                  "        base0(),",
                  "        leg(),",
                  "        Rotate([0, 0, 1], -90, leg()),",
                  "        Rotate([0, 0, 1], 90, leg()),",
                  "        Rotate([0, 0, 1], 180, leg())",
                  "    ])",
                  "}",
                  "",
                  "function inset_hole(d,l,id, il) {",
                  "    return Union([",
                  "    Cylinder(d/2, l),",
                  "    Cylinder(id/2, il),",
                  "    ]);",
                  "}",
                  "",
                  "let screw_hole_r = 30;",
                  "",
                  "function base_plug() {",
                  "    let tol = 0.25;",
                  "    let power_hole_r = 40;",
                  "",
                  "   function screw_hole() {",
                  "       return inset_hole(4.2, 20, 9, 3.5)",
                  "   }",
                  "",
                  "   function power_lead_hole() {",
                  "       return inset_hole(7, 20, 7, 20)",
                  "   }",
                  "",
                  "    let plate =  Union( [",
                  "    Cylinder(inset3_radius - 2 * tol, inset1_height),",
                  "    Cylinder(inset4_radius - 2 * tol, inset1_height * 2),",
                  "    ])",
                  "    return Difference(plate, [",
                  "        rod_holes(),",
                  "       Translate([-screw_hole_r,0,0], screw_hole()),",
                  "       Translate([screw_hole_r,0,0], screw_hole()),",
                  "       Translate([0,-power_hole_r,0], power_lead_hole())",
                  "    ])",
                  "}",
                  "",
                  "let cos60 = Math.cos(60 * Math.PI/180)",
                  "let sin60 = Math.sin(60 * Math.PI/180)",
                  "",
                  "function hexagon(r) {",
                  "    let dx = r * cos60;",
                  "    let dy = r * sin60;",
                  "    return new Sketch([r,0])",
                  "        .LineTo([dx,dy])",
                  "        .LineTo([-dx,dy])",
                  "        .LineTo([-r,0])",
                  "        .LineTo([-dx,-dy])",
                  "        .LineTo([dx,-dy])",
                  "        .End(true)",
                  "        .Face();",
                  "}",
                  "",
                  "function hole_with_captive_nut(d,l,dnut, lnut, inut) {",
                  "    let slot = Extrude(hexagon(dnut/2), [0,0,lnut]);",
                  "    return Union([",
                  "        Cylinder(d/2,l),",
                  "        Translate([0,0,inut], slot)",
                  "    ])",
                  "}",
                  "",
                  "function hole_with_slotted_captive_nut(d,l,dnut, lnut, inut, slot_depth) {",
                  "    let slot = Union([",
                  "        Extrude(hexagon(dnut/2), [0,0,lnut]),",
                  "        Translate([-slot_depth,-dnut * sin60/2,0], Box(slot_depth,dnut * sin60,lnut, false))",
                  "    ])",
                  "    return Union([",
                  "        Cylinder(d/2,l),",
                  "        Translate([0,0,inut], slot)",
                  "    ])",
                  "}",
                  "",
                  "function mount_plate() {",
                  "    let w = 80",
                  "    let h = 100",
                  "    let t = 10",
                  "    let r = 5",
                  "",
                  "    function mount_hole() {",
                  "        let hole = hole_with_slotted_captive_nut(4, 15, 8, 3.5, 4, 20);",
                  "        hole = Rotate([0,0,1], 90, hole);",
                  "        return hole",
                  "    }",
                  "",
                  "    function ps_hole() {",
                  "        return inset_hole(3,10,6,3)",
                  "    }",
                  "",
                  "    function pcb_hole() {",
                  "        let hole = inset_hole(3,10,6,3);",
                  "        hole = Rotate([1,0,0],180, hole)",
                  "        hole = Translate([0,0,t], hole)",
                  "        return hole",
                  "    }",
                  "",
                  "    let plate = new Sketch([-w/2,0])",
                  "        .LineTo([-w/2,h]).Fillet(r)",
                  "        .LineTo([w/2,h]).Fillet(r)",
                  "        .LineTo([w/2,0])",
                  "        .End(true)",
                  "        .Face();",
                  "    plate = Extrude(plate,[0,0,t])",
                  "    plate = Difference(plate,[",
                  "        Translate([0,15,0], ps_hole()),",
                  "        Translate([0,15 + 55,0], ps_hole()),",
                  "    ]);",
                  "    let y = 20",
                  "    let dy = 70",
                  "    plate = Difference(plate,[",
                  "        Translate([-32,y,0], pcb_hole()),",
                  "        Translate([32,y,0], pcb_hole()),",
                  "        Translate([-32,y+dy,0], pcb_hole()),",
                  "        Translate([32,y+dy,0], pcb_hole()),",
                  "    ]);",
                  "",
                  "    plate = Translate([0,t/2, 0], Rotate([1,0,0], 90, plate))",
                  "    plate = Difference(plate,[",
                  "       Translate([-screw_hole_r,0,0], mount_hole()),",
                  "       Translate([screw_hole_r,0,0], mount_hole()),",
                  "    ])",
                  "",
                  "    return plate",
                  "}",
                  "",
                  "",
                  "// hole_with_captive_nut(4, 15, 8, 3.5, 4)",
                  "",
                  "//base0()",
                  "",
                  "// leg()",
                  "// base()",
                  "",
                  "// base_plug()",
                  "",
                  "mount_plate()",
                  "",
                  "// Intersection([",
                  "// base(),",
                  "// Translate([60,0,0], Box(70,50,100, true)),",
                  "// ])",
                  "",
                  "",
                  "",
                  "",
                  ""
                ]
              },
              "width": 50,
              "isClosable": false,
              "reorderEnabled": true
            }
          ]
        },
        {
          "type": "column",
          "isClosable": true,
          "reorderEnabled": true,
          "title": "",
          "width": 50,
          "content": [
            {
              "type": "stack",
              "height": 65.99870212711552,
              "isClosable": true,
              "reorderEnabled": true,
              "title": "",
              "activeItemIndex": 0,
              "content": [
                {
                  "type": "component",
                  "componentName": "cascadeView",
                  "title": "CAD View",
                  "componentState": {
                    "componentName": "cascadeView",
                    "MeshRes": 0.03,
                    "MeshResRange": [
                      0.01,
                      2
                    ],
                    "Cache?": false,
                    "Radius": 30,
                    "RadiusRange": [
                      20,
                      40
                    ]
                  },
                  "isClosable": false,
                  "reorderEnabled": true
                }
              ]
            },
            {
              "type": "stack",
              "height": 34.00129787288447,
              "isClosable": true,
              "reorderEnabled": true,
              "title": "",
              "activeItemIndex": 0,
              "content": [
                {
                  "type": "component",
                  "componentName": "console",
                  "title": "Console",
                  "componentState": {},
                  "height": 20,
                  "isClosable": false,
                  "reorderEnabled": true
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "isClosable": true,
  "reorderEnabled": true,
  "title": "",
  "openPopouts": [],
  "maximisedItemId": null
}